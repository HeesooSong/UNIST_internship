df_match$C2_int[index_C2] <- NA
}
if (C3){
index_C3 <- which(df_match$C3_int < 1000)
df_match$C3_sigma[index_C3] <- NA
df_match$C3_int[index_C3] <- NA
}
if (C4){
index_C4 <- which(df_match$C4_int < 1000)
df_match$C4_sigma[index_C4] <- 0
df_match$C4_int[index_C4] <- 0
}
} #else if (intensity == "int_sig"){
#   if (C1){
#     index_C1 <- which(df_match$C1_int_sig < 1000)
#     df_match$C1_sigma[index_C1] <- 0
#     df_match$C1_int[index_C1] <- 0
#   }
#   if (C2){
#     index_C2 <- which(df_match$C2_int_sig < 1000)
#     df_match$C2_sigma[index_C2] <- 0
#     df_match$C2_int[index_C2] <- 0
#   }
#   if (C3){
#     index_C3 <- which(df_match$C3_int_sig < 1000)
#     df_match$C3_sigma[index_C3] <- 0
#     df_match$C3_int[index_C3] <- 0
#   }
#   if (C4){
#     index_C4 <- which(df_match$C4_int_sig < 1000)
#     df_match$C4_sigma[index_C4] <- 0
#     df_match$C4_int[index_C4] <- 0
#   }
# }
# 3. Remove positions that the spot is out of range in all channels
df_match <- df_match[!(is.na(df_match[,sigma[1]]) & is.na(df_match[,sigma[2]])),]
if (intensity == "int"){
df_meta <- df_match[,c(sigma, int)]
} else if (intensity == "int_sig"){
df_meta <- df_match[,c(sigma, int_sig)]
}
#pdf(file = paste0(vis_path, "pairs_plot.pdf"), width = 7, height = 7)
pairs(df_meta)
#dev.off()
C1_venn <- df_match[!is.na(df_match[,id[1]]), "X"]
C2_venn <- df_match[!is.na(df_match[,id[2]]), "X"]
# Chart
venndiagram <- venn.diagram(
x = list(C1_venn, C2_venn),
category.names = channels,
filename = paste0(vis_path, 'venn_diagram.png'), #NULL, #
disable.logging = TRUE,
output = TRUE, #FALSE, #
# Output features
imagetype="png" ,
height = 480 ,
width = 480 ,
resolution = 300,
compression = "lzw",
# Circles
lwd = 2,
lty = 'blank',
fill = brewer.pal(8, "Set1")[c(1, 2)],
# Numbers
cex = .6,
fontface = "bold",
fontfamily = "sans",
# Set names
cat.cex = 0.6,
cat.fontface = "bold",
cat.default.pos = "outer",
#cat.pos = c(-27, 27, 135),
#cat.dist = c(0.055, 0.055, 0.085),
cat.fontfamily = "sans",
#rotation = 1
)
grid.newpage()
grid::grid.draw(venndiagram)
library(cluster)
library(factoextra)
library(dplyr)
library(ggplot2)
library(reshape2)
library(VennDiagram)
library(RColorBrewer)
library(plyr)
#base = "C:/Users/pc/Desktop/UNIST_internship/Sample_Image/Positive/PB417_01/"
base = "C:/Users/pc/Desktop/UNIST_internship/20221123_Pos10_Neg10/Negative/PB1484_09/"
vis_path = paste0(base, "analysis/")
#file = "Spot_matching_result_imputated.csv"
file = "Spot_matching_result.csv"
# Two options for intensity value: "int" or "int_sig"
intensity = "int_sig"
# Channels of interest
C1 = FALSE
C2 = TRUE
C3 = FALSE
C4 = TRUE
id = c("C1_id", "C2_id", "C3_id", "C4_id")
channels = c("C1", "C2", "C3", "C4")
sigma = c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma")
int = c("C1_int", "C2_int", "C3_int", "C4_int")
int_sig = c("C1_int_sig", "C2_int_sig", "C3_int_sig", "C4_int_sig")
id = id[c(C1, C2, C3, C4)]
channels = channels[c(C1, C2, C3, C4)]
sigma = sigma[c(C1, C2, C3, C4)]
int = int[c(C1, C2, C3, C4)]
int_sig = int_sig[c(C1, C2, C3, C4)]
df_match <- read.csv(paste0(base, file))
print(colnames(df_match))
# 1. Limit sigma (30<sigma<250)
if (C1){
index_C1 <- which(df_match$C1_sigma < 42.6 | df_match$C1_sigma > 250)
df_match$C1_sigma[index_C1] <- NA
df_match$C1_int_sig[index_C1] <- NA
}
if (C2){
index_C2 <- which(df_match$C2_sigma < 42.6 | df_match$C2_sigma > 250)
df_match$C2_sigma[index_C2] <- NA
df_match$C2_int_sig[index_C2] <- NA
}
if (C3){
index_C3 <- which(df_match$C3_sigma < 42.6 | df_match$C3_sigma > 250)
df_match$C3_sigma[index_C3] <- NA
df_match$C3_int_sig[index_C3] <- NA
}
if (C4){
index_C4 <- which(df_match$C4_sigma < 42.6 | df_match$C4_sigma > 250)
df_match$C4_sigma[index_C4] <- NA
df_match$C4_int_sig[index_C4] <- NA
}
# 2. Limit intensity (intensity > 1000)
if (intensity == "int"){
if (C1){
index_C1 <- which(df_match$C1_int < 1000)
df_match$C1_sigma[index_C1] <- 0
df_match$C1_int[index_C1] <- 0
}
if (C2){
index_C2 <- which(df_match$C2_int < 1000)
df_match$C2_sigma[index_C2] <- NA
df_match$C2_int[index_C2] <- NA
}
if (C3){
index_C3 <- which(df_match$C3_int < 1000)
df_match$C3_sigma[index_C3] <- NA
df_match$C3_int[index_C3] <- NA
}
if (C4){
index_C4 <- which(df_match$C4_int < 1000)
df_match$C4_sigma[index_C4] <- 0
df_match$C4_int[index_C4] <- 0
}
} #else if (intensity == "int_sig"){
#   if (C1){
#     index_C1 <- which(df_match$C1_int_sig < 1000)
#     df_match$C1_sigma[index_C1] <- 0
#     df_match$C1_int[index_C1] <- 0
#   }
#   if (C2){
#     index_C2 <- which(df_match$C2_int_sig < 1000)
#     df_match$C2_sigma[index_C2] <- 0
#     df_match$C2_int[index_C2] <- 0
#   }
#   if (C3){
#     index_C3 <- which(df_match$C3_int_sig < 1000)
#     df_match$C3_sigma[index_C3] <- 0
#     df_match$C3_int[index_C3] <- 0
#   }
#   if (C4){
#     index_C4 <- which(df_match$C4_int_sig < 1000)
#     df_match$C4_sigma[index_C4] <- 0
#     df_match$C4_int[index_C4] <- 0
#   }
# }
# 3. Remove positions that the spot is out of range in all channels
df_match <- df_match[!(is.na(df_match[,sigma[1]]) & is.na(df_match[,sigma[2]])),]
if (intensity == "int"){
df_meta <- df_match[,c(sigma, int)]
} else if (intensity == "int_sig"){
df_meta <- df_match[,c(sigma, int_sig)]
}
#pdf(file = paste0(vis_path, "pairs_plot.pdf"), width = 7, height = 7)
pairs(df_meta)
#dev.off()
C1_venn <- df_match[!is.na(df_match[,id[1]]), "X"]
C2_venn <- df_match[!is.na(df_match[,id[2]]), "X"]
# Chart
venndiagram <- venn.diagram(
x = list(C1_venn, C2_venn),
category.names = channels,
filename = paste0(vis_path, 'venn_diagram.png'), #NULL, #
disable.logging = TRUE,
output = TRUE, #FALSE, #
# Output features
imagetype="png" ,
height = 480 ,
width = 480 ,
resolution = 300,
compression = "lzw",
# Circles
lwd = 2,
lty = 'blank',
fill = brewer.pal(8, "Set1")[c(1, 2)],
# Numbers
cex = .6,
fontface = "bold",
fontfamily = "sans",
# Set names
cat.cex = 0.6,
cat.fontface = "bold",
cat.default.pos = "outer",
#cat.pos = c(-27, 27, 135),
#cat.dist = c(0.055, 0.055, 0.085),
cat.fontfamily = "sans",
#rotation = 1
)
grid.newpage()
grid::grid.draw(venndiagram)
C1_venn <- df_match[!is.na(df_match[,id[1]]), "X"]
C2_venn <- df_match[!is.na(df_match[,id[2]]), "X"]
# Chart
venndiagram <- venn.diagram(
x = list(C1_venn, C2_venn),
category.names = channels,
filename = paste0(vis_path, 'venn_diagram.png'), #NULL, #
disable.logging = TRUE,
output = TRUE, #FALSE, #
# Output features
imagetype="png" ,
height = 480 ,
width = 480 ,
resolution = 300,
compression = "lzw",
# Circles
lwd = 2,
lty = 'blank',
fill = brewer.pal(8, "Set1")[c(1, 2)],
# Numbers
cex = .6,
fontface = "bold",
fontfamily = "sans",
# Set names
cat.cex = 0.6,
cat.fontface = "bold",
cat.default.pos = "outer",
#cat.pos = c(-27, 27, 135),
#cat.dist = c(0.055, 0.055, 0.085),
cat.fontfamily = "sans",
#rotation = 1
)
grid.newpage()
grid::grid.draw(venndiagram)
library(cluster)
library(factoextra)
library(dplyr)
library(ggplot2)
library(reshape2)
library(VennDiagram)
library(RColorBrewer)
library(plyr)
#base = "C:/Users/pc/Desktop/UNIST_internship/Sample_Image/Positive/PB417_01/"
base = "C:/Users/pc/Desktop/UNIST_internship/20221123_Pos10_Neg10/Negative/PB1484_09/"
vis_path = paste0(base, "analysis_20221205/")
#file = "Spot_matching_result_imputated.csv"
file = "Spot_matching_result.csv"
# Two options for intensity value: "int" or "int_sig"
intensity = "int_sig"
df_match <- read.csv(paste0(base, file))
print(colnames(df_match))
# 1. Limit sigma (30<sigma<250)
index_C1 <- which(df_match$C1_sigma < 42.6 | df_match$C1_sigma > 250)
df_match$C1_sigma[index_C1] <- 0
df_match$C1_int[index_C1] <- 0
index_C2 <- which(df_match$C2_sigma < 42.6 | df_match$C2_sigma > 250)
df_match$C2_sigma[index_C2] <- 0
df_match$C2_int[index_C2] <- 0
index_C3 <- which(df_match$C3_sigma < 42.6 | df_match$C3_sigma > 250)
df_match$C3_sigma[index_C3] <- 0
df_match$C3_int[index_C3] <- 0
index_C4 <- which(df_match$C4_sigma < 42.6 | df_match$C4_sigma > 250)
df_match$C4_sigma[index_C4] <- 0
df_match$C4_int[index_C4] <- 0
# 2. Limit intensity (intensity > 1000)
if (intensity == "int"){
index_C1 <- which(df_match$C1_int < 1000)
df_match$C1_sigma[index_C1] <- 0
df_match$C1_int[index_C1] <- 0
index_C2 <- which(df_match$C2_int < 1000)
df_match$C2_sigma[index_C2] <- 0
df_match$C2_int[index_C2] <- 0
index_C3 <- which(df_match$C3_int < 1000)
df_match$C3_sigma[index_C3] <- 0
df_match$C3_int[index_C3] <- 0
index_C4 <- which(df_match$C4_int < 1000)
df_match$C4_sigma[index_C4] <- 0
df_match$C4_int[index_C4] <- 0
} #else if (intensity == "int_sig"){
#   index_C1 <- which(df_match$C1_int < 1000)
#   df_match$C1_sigma[index_C1] <- 0
#   df_match$C1_int[index_C1] <- 0
#
#   index_C2 <- which(df_match$C2_int < 1000)
#   df_match$C2_sigma[index_C2] <- 0
#   df_match$C2_int[index_C2] <- 0
#
#   index_C3 <- which(df_match$C3_int < 1000)
#   df_match$C3_sigma[index_C3] <- 0
#   df_match$C3_int[index_C3] <- 0
#
#   index_C4 <- which(df_match$C4_int < 1000)
#   df_match$C4_sigma[index_C4] <- 0
#   df_match$C4_int[index_C4] <- 0
# }
# 3. Remove positions that the spot is out of range in all channels
df_match <- df_match[!(df_match$C1_sigma==0 & df_match$C2_sigma==0 & df_match$C3_sigma==0 & df_match$C4_sigma==0),]
if (intensity == "int"){
df_meta <- df_match[,c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma", "C1_int", "C2_int", "C3_int", "C4_int")]
} else if (intensity == "int_sig"){
df_meta <- df_match[,c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma", "C1_int_sig", "C2_int_sig", "C3_int_sig", "C4_int_sig")]
}
#pdf(file = paste0(vis_path, "pairs_plot.pdf"), width = 7, height = 7)
pairs(df_meta)
#dev.off()
C1 <- df_match[!is.na(df_match$C1_id), "X"]
C2 <- df_match[!is.na(df_match$C2_id), "X"]
C3 <- df_match[!is.na(df_match$C3_id), "X"]
C4 <- df_match[!is.na(df_match$C4_id), "X"]
myCol <- brewer.pal(4, "Set1")
# Chart
venndiagram <- venn.diagram(
x = list(C1, C2, C3, C4),
category.names = c("C1" , "C2 " , "C3", "C4"),
filename = paste0(vis_path, 'venn_diagram.png'),
disable.logging = TRUE,
output = TRUE,
# Output features
imagetype="png" ,
height = 480 ,
width = 480 ,
resolution = 300,
compression = "lzw",
# Circles
lwd = 2,
lty = 'blank',
fill = myCol,
# Numbers
cex = .6,
fontface = "bold",
fontfamily = "sans",
# Set names
cat.cex = 0.6,
cat.fontface = "bold",
cat.default.pos = "outer",
#cat.pos = c(-27, 27, 135),
#cat.dist = c(0.055, 0.055, 0.085),
cat.fontfamily = "sans",
#rotation = 1
)
library(cluster)
library(factoextra)
library(dplyr)
library(ggplot2)
library(reshape2)
library(VennDiagram)
library(RColorBrewer)
library(plyr)
#base = "C:/Users/pc/Desktop/UNIST_internship/Sample_Image/Positive/PB417_01/"
base = "C:/Users/pc/Desktop/UNIST_internship/20221123_Pos10_Neg10/Negative/PB1484_09/"
vis_path = paste0(base, "analysis/")
#file = "Spot_matching_result_imputated.csv"
file = "Spot_matching_result.csv"
# Two options for intensity value: "int" or "int_sig"
intensity = "int_sig"
df_match <- read.csv(paste0(base, file))
print(colnames(df_match))
# 1. Limit sigma (30<sigma<250)
index_C1 <- which(df_match$C1_sigma < 42.6 | df_match$C1_sigma > 250)
df_match$C1_sigma[index_C1] <- 0
df_match$C1_int[index_C1] <- 0
index_C2 <- which(df_match$C2_sigma < 42.6 | df_match$C2_sigma > 250)
df_match$C2_sigma[index_C2] <- 0
df_match$C2_int[index_C2] <- 0
index_C3 <- which(df_match$C3_sigma < 42.6 | df_match$C3_sigma > 250)
df_match$C3_sigma[index_C3] <- 0
df_match$C3_int[index_C3] <- 0
index_C4 <- which(df_match$C4_sigma < 42.6 | df_match$C4_sigma > 250)
df_match$C4_sigma[index_C4] <- 0
df_match$C4_int[index_C4] <- 0
# 2. Limit intensity (intensity > 1000)
if (intensity == "int"){
index_C1 <- which(df_match$C1_int < 1000)
df_match$C1_sigma[index_C1] <- 0
df_match$C1_int[index_C1] <- 0
index_C2 <- which(df_match$C2_int < 1000)
df_match$C2_sigma[index_C2] <- 0
df_match$C2_int[index_C2] <- 0
index_C3 <- which(df_match$C3_int < 1000)
df_match$C3_sigma[index_C3] <- 0
df_match$C3_int[index_C3] <- 0
index_C4 <- which(df_match$C4_int < 1000)
df_match$C4_sigma[index_C4] <- 0
df_match$C4_int[index_C4] <- 0
} #else if (intensity == "int_sig"){
#   index_C1 <- which(df_match$C1_int < 1000)
#   df_match$C1_sigma[index_C1] <- 0
#   df_match$C1_int[index_C1] <- 0
#
#   index_C2 <- which(df_match$C2_int < 1000)
#   df_match$C2_sigma[index_C2] <- 0
#   df_match$C2_int[index_C2] <- 0
#
#   index_C3 <- which(df_match$C3_int < 1000)
#   df_match$C3_sigma[index_C3] <- 0
#   df_match$C3_int[index_C3] <- 0
#
#   index_C4 <- which(df_match$C4_int < 1000)
#   df_match$C4_sigma[index_C4] <- 0
#   df_match$C4_int[index_C4] <- 0
# }
# 3. Remove positions that the spot is out of range in all channels
df_match <- df_match[!(df_match$C1_sigma==0 & df_match$C2_sigma==0 & df_match$C3_sigma==0 & df_match$C4_sigma==0),]
if (intensity == "int"){
df_meta <- df_match[,c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma", "C1_int", "C2_int", "C3_int", "C4_int")]
} else if (intensity == "int_sig"){
df_meta <- df_match[,c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma", "C1_int_sig", "C2_int_sig", "C3_int_sig", "C4_int_sig")]
}
#pdf(file = paste0(vis_path, "pairs_plot.pdf"), width = 7, height = 7)
pairs(df_meta)
#dev.off()
C1 <- df_match[!is.na(df_match$C1_id), "X"]
C2 <- df_match[!is.na(df_match$C2_id), "X"]
C3 <- df_match[!is.na(df_match$C3_id), "X"]
C4 <- df_match[!is.na(df_match$C4_id), "X"]
myCol <- brewer.pal(4, "Set1")
# Chart
venndiagram <- venn.diagram(
x = list(C1, C2, C3, C4),
category.names = c("C1" , "C2 " , "C3", "C4"),
filename = paste0(vis_path, 'venn_diagram.png'),
disable.logging = TRUE,
output = TRUE,
# Output features
imagetype="png" ,
height = 480 ,
width = 480 ,
resolution = 300,
compression = "lzw",
# Circles
lwd = 2,
lty = 'blank',
fill = myCol,
# Numbers
cex = .6,
fontface = "bold",
fontfamily = "sans",
# Set names
cat.cex = 0.6,
cat.fontface = "bold",
cat.default.pos = "outer",
#cat.pos = c(-27, 27, 135),
#cat.dist = c(0.055, 0.055, 0.085),
cat.fontfamily = "sans",
#rotation = 1
)
n_spots <- data.frame(channel = c('C1', 'C2', 'C3', 'C4'), freq = c(length(C1), length(C2), length(C3), length(C4)))
#pdf(file = paste0(vis_path, "n_spots_each_channel.pdf"), width = 8, height = 6)
ggplot(n_spots, aes(x = channel, y = freq)) +
geom_bar(position = "dodge", stat="identity", width=1, color = "white") +
theme_bw() +
theme(plot.title = element_text(size=20, hjust=0.5, face = "bold")) +
geom_text(aes(y = (freq + 1000), label = freq, fontface = 2), size=5) +
labs(title = "Number of Spots in Each Channel")
#dev.off()
if (intensity == "int"){
avg_int_prep <- df_match[,c("C1_int", "C2_int", "C3_int", "C4_int")]
} else if (intensity == "int_sig"){
avg_int_prep <- df_match[,c("C1_int_sig", "C2_int_sig", "C3_int_sig", "C4_int_sig")]
}
avg_sig_prep <- df_match[,c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma")]
avg_sig_prep[avg_sig_prep == 0] <- NA
avg_int <- apply(avg_int_prep, 2, mean, na.rm = TRUE)
avg_sig <- apply(avg_sig_prep, 2, mean, na.rm = TRUE)
df_avg_int <- data.frame(Channel = c('C1', 'C2', 'C3', 'C4'), Average_Intensity = avg_int)
df_avg_sig <- data.frame(Channel = c('C1', 'C2', 'C3', 'C4'), Average_Sigma = avg_sig)
df_avg_int$Average_Intensity <- round(df_avg_int$Average_Intensity,2)
df_avg_sig$Average_Sigma <- round(df_avg_sig$Average_Sigma,2)
df_avg_sig$Average_FWHM <- 2.35*df_avg_sig$Average_Sigma
#pdf(file = paste0(vis_path, "avg_int_histogram.pdf"), width = 8, height = 6)
ggplot(df_avg_int, aes(x = Channel, y = Average_Intensity)) +
geom_bar(position = "dodge", stat="identity", width=1, color = "white") +
theme_bw() +
theme(plot.title = element_text(size=20, hjust=0.5, face = "bold")) +
geom_text(aes(y = (Average_Intensity + Average_Intensity*0.1), label = Average_Intensity, fontface = 2), size=5) +
labs(title = "Average Intensity in Each Channel")
#dev.off()
#pdf(file = paste0(vis_path, "avg_sig_histogram.pdf"), width = 8, height = 6)
ggplot(df_avg_sig, aes(x = Channel, y = Average_Sigma)) +
geom_bar(position = "dodge", stat="identity", width=1, color = "white") +
theme_bw() +
theme(plot.title = element_text(size=20, hjust=0.5, face = "bold")) +
geom_text(aes(y = (Average_Sigma + 3), label = Average_Sigma, fontface = 2), size=5) +
labs(title = "Average Sigma in Each Channel")
#dev.off()
#pdf(file = paste0(vis_path, "avg_sig_histogram.pdf"), width = 8, height = 6)
ggplot(df_avg_sig, aes(x = Channel, y = Average_FWHM)) +
geom_bar(position = "dodge", stat="identity", width=1, color = "white") +
theme_bw() +
theme(plot.title = element_text(size=20, hjust=0.5, face = "bold")) +
geom_text(aes(y = (Average_FWHM + 10), label = Average_FWHM, fontface = 2), size=5) +
labs(title = "Average FWHM in Each Channel")
#dev.off()
