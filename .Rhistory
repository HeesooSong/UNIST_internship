#CI_high <- ddply(multi_sig_dist, "variable", summarise, CI = as.numeric(t.test(value, conf.level = 0.95)[4]$conf.int[2]))
pdf(file = paste0(vis_path, "sigma_distribution_withzero_histogram.pdf"), width = 8, height = 6)
ggplot(multi_sig_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=5, alpha = .5, position = "identity")+
#geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma")
#geom_vline(data = CI_low, aes(xintercept=CI, colour = variable), size = 0.5) +
#geom_vline(data = CI_high, aes(xintercept=CI, colour = variable), size = 0.5)
dev.off
ggplot(multi_sig_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
theme_bw()
# Compare Intensity/Sigma distribution in channels
multi_sig_dist <- avg_sig_prep %>% melt()
#multi_sig_dist <- multi_sig_dist[which(multi_sig_dist$value > 0),]
#cdat <- ddply(multi_sig_dist, "variable", summarise, rating.mean = mean(value))
#CI_low <- ddply(multi_sig_dist, "variable", summarise, CI = as.numeric(t.test(value, conf.level = 0.95)[4]$conf.int[1]))
#CI_high <- ddply(multi_sig_dist, "variable", summarise, CI = as.numeric(t.test(value, conf.level = 0.95)[4]$conf.int[2]))
pdf(file = paste0(vis_path, "sigma_distribution_withzero_histogram.pdf"), width = 8, height = 6)
ggplot(multi_sig_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=5, alpha = .5, position = "identity")+
#geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma")
#geom_vline(data = CI_low, aes(xintercept=CI, colour = variable), size = 0.5) +
#geom_vline(data = CI_high, aes(xintercept=CI, colour = variable), size = 0.5)
dev.off()
ggplot(multi_sig_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
theme_bw()
multi_int_dist <- avg_int_prep %>% melt()
#multi_int_dist <- multi_int_dist[c(rownames(multi_sig_dist)),]
# for (ch in unique(multi_int_dist$variable)){
#   imputed_table <- multi_int_dist[which(multi_int_dist$variable == ch),"value"] %>% table()
#   minimum <- imputed_table[which(imputed_table == max(imputed_table))] %>% names() %>% as.numeric()
#   multi_int_dist <- multi_int_dist[!(multi_int_dist$variable == ch & multi_int_dist$value <= minimum),]
# }
#cdat <- ddply(multi_int_dist, "variable", summarise, rating.mean = mean(value))
pdf(file = paste0(vis_path, "intensity_distribution_withzero_histogram.pdf"), width = 8, height = 6)
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
#geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
dev.off()
ggplot(multi_int_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
ylim(0, 200000) +
theme_bw()
multi_int_dist <- avg_int_prep %>% melt()
multi_int_dist <- multi_int_dist[c(rownames(multi_sig_dist)),]
# for (ch in unique(multi_int_dist$variable)){
#   imputed_table <- multi_int_dist[which(multi_int_dist$variable == ch),"value"] %>% table()
#   minimum <- imputed_table[which(imputed_table == max(imputed_table))] %>% names() %>% as.numeric()
#   multi_int_dist <- multi_int_dist[!(multi_int_dist$variable == ch & multi_int_dist$value <= minimum),]
# }
#cdat <- ddply(multi_int_dist, "variable", summarise, rating.mean = mean(value))
pdf(file = paste0(vis_path, "intensity_distribution_histogram.pdf"), width = 8, height = 6)
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
#geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
dev.off()
ggplot(multi_int_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
ylim(0, 200000) +
theme_bw()
multi_int_dist <- avg_int_prep %>% melt()
multi_int_dist <- multi_int_dist[c(rownames(multi_sig_dist)),]
# for (ch in unique(multi_int_dist$variable)){
#   imputed_table <- multi_int_dist[which(multi_int_dist$variable == ch),"value"] %>% table()
#   minimum <- imputed_table[which(imputed_table == max(imputed_table))] %>% names() %>% as.numeric()
#   multi_int_dist <- multi_int_dist[!(multi_int_dist$variable == ch & multi_int_dist$value <= minimum),]
# }
cdat <- ddply(multi_int_dist, "variable", summarise, rating.mean = mean(value))
pdf(file = paste0(vis_path, "intensity_distribution_histogram.pdf"), width = 8, height = 6)
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
dev.off()
multi_int_dist <- avg_int_prep %>% melt()
multi_int_dist <- multi_int_dist[c(rownames(multi_sig_dist)),]
# for (ch in unique(multi_int_dist$variable)){
#   imputed_table <- multi_int_dist[which(multi_int_dist$variable == ch),"value"] %>% table()
#   minimum <- imputed_table[which(imputed_table == max(imputed_table))] %>% names() %>% as.numeric()
#   multi_int_dist <- multi_int_dist[!(multi_int_dist$variable == ch & multi_int_dist$value <= minimum),]
# }
cdat <- ddply(multi_int_dist, "variable", summarise, rating.mean = mean(value))
pdf(file = paste0(vis_path, "intensity_distribution_histogram.pdf"), width = 8, height = 6)
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
dev.off()
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
multi_int_dist <- avg_int_prep %>% melt()
multi_int_dist <- multi_int_dist[c(rownames(multi_sig_dist)),]
# for (ch in unique(multi_int_dist$variable)){
#   imputed_table <- multi_int_dist[which(multi_int_dist$variable == ch),"value"] %>% table()
#   minimum <- imputed_table[which(imputed_table == max(imputed_table))] %>% names() %>% as.numeric()
#   multi_int_dist <- multi_int_dist[!(multi_int_dist$variable == ch & multi_int_dist$value <= minimum),]
# }
cdat <- ddply(multi_int_dist, "variable", summarise, rating.mean = mean(value))
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
multi_int_dist <- avg_int_prep %>% melt()
multi_int_dist <- multi_int_dist[c(rownames(multi_sig_dist)),]
# for (ch in unique(multi_int_dist$variable)){
#   imputed_table <- multi_int_dist[which(multi_int_dist$variable == ch),"value"] %>% table()
#   minimum <- imputed_table[which(imputed_table == max(imputed_table))] %>% names() %>% as.numeric()
#   multi_int_dist <- multi_int_dist[!(multi_int_dist$variable == ch & multi_int_dist$value <= minimum),]
# }
cdat <- ddply(multi_int_dist, "variable", summarise, rating.mean = mean(value))
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
library(cluster)
library(factoextra)
library(dplyr)
library(ggplot2)
library(reshape2)
library(VennDiagram)
library(RColorBrewer)
library(plyr)
#base = "C:/Users/user/Desktop/UNIST_internship/Sample_Image/Negative/2/"
base = "C:/Users/user/Desktop/UNIST_internship/Sample_Image/Positive/PB417_01/"
#base = "C:/Users/pc/Desktop/UNIST_internship/Sample_Image/Positive/PB417_01/"
vis_path = paste0(base, "analysis_20221109/")
file = "Spot_matching_result_imputated.csv"
#######################################################
# Explore data
#######################################################
df_match <- read.csv(paste0(base, file))
print(colnames(df_match))
#df_match <- df_match[which(df_match$n_match > 1),] # Only take coexpressed spots
#df_match <- df_match[which(df_match)]
df_meta <- df_match[,c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma", "C1_int", "C2_int", "C3_int", "C4_int")]
# Normalization
df_meta <- log10(df_meta)
df_meta_test <- df_meta[which(is.finite(df_meta))]
df_meta_test <- df_meta[sapply(df_meta, is.infinite)]
# Normalization
df_meta <- log10(df_meta)
df_meta[sapply(df_meta, is.infinite)] <- NA
View(df_meta)
means <- apply(df_meta,2,mean, na.rm=TRUE)
sds <- apply(df_meta,2,sd, na.rm=TRUE)
df_meta_norm <- scale(df_meta,center=means,scale=sds)
View(df_meta_norm)
# Histogram: Sigma/intensity distribution after normalization
df_meta_norm_sig <- df_meta_norm[,c(1:4)]
df_meta_norm_sig_dist <- df_meta_norm_sig %>% melt()
df_meta_norm_sig_dist <- df_meta_norm_sig_dist[,c(2,3)]
colnames(df_meta_norm_sig_dist)[1] <- "variable"
#df_meta_norm_sig_dist <- df_meta_norm_sig_dist[c(rownames(multi_sig_dist)),]
cdat <- ddply(df_meta_norm_sig_dist, "variable", summarise, rating.mean = mean(value))
ggplot(df_meta_norm_sig_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma") +
xlim(0, 10)
ggplot(df_meta_norm_sig_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma") +
xlim(-1, 1)
ggplot(df_meta_norm_sig_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma") +
xlim(-5, 5)
#df_meta_norm_sig_dist <- df_meta_norm_sig_dist[c(rownames(multi_sig_dist)),]
cdat <- ddply(df_meta_norm_sig_dist, "variable", summarise, rating.mean = mean(value), na.rm = TRUE)
ggplot(df_meta_norm_sig_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma") +
xlim(-5, 5)
View(cdat)
#df_meta_norm_sig_dist <- df_meta_norm_sig_dist[c(rownames(multi_sig_dist)),]
cdat <- ddply(df_meta_norm_sig_dist, "variable", summarise, rating.mean = mean(value, na.rm = TRUE))
ggplot(df_meta_norm_sig_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma") +
xlim(-5, 5)
View(cdat)
ggplot(df_meta_norm_sig_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
theme_bw()
df_meta_norm_int <- df_meta_norm[,c(5:8)]
df_meta_norm_int_dist <- df_meta_norm_int %>% melt()
df_meta_norm_int_dist <- df_meta_norm_int_dist[,c(2,3)]
colnames(df_meta_norm_int_dist)[1] <- "variable"
cdat <- ddply(df_meta_norm_int_dist, "variable", summarise, rating.mean = mean(value))
ggplot(df_meta_norm_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma") +
xlim(0, 15)
ggplot(df_meta_norm_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("intensity") +
xlim(0, 15)
ggplot(df_meta_norm_int_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
theme_bw() +
ylim(0, 20)
View(df_meta_norm_int_dist)
ggplot(df_meta_norm_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("intensity") +
xlim(-1, 15)
df_meta_norm_int <- df_meta_norm[,c(5:8)]
df_meta_norm_int_dist <- df_meta_norm_int %>% melt()
df_meta_norm_int_dist <- df_meta_norm_int_dist[,c(2,3)]
colnames(df_meta_norm_int_dist)[1] <- "variable"
cdat <- ddply(df_meta_norm_int_dist, "variable", summarise, rating.mean = mean(value))
ggplot(df_meta_norm_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("intensity") +
xlim(-1, 15)
View(df_meta_norm_int_dist)
View(cdat)
View(df_meta_norm_int)
ggplot(df_meta_norm_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("intensity") +
xlim(-1, 5)
ggplot(df_meta_norm_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("intensity") +
xlim(-5, 5)
ggplot(df_meta_norm_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("intensity") +
xlim(-2, 5)
ggplot(df_meta_norm_int_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
theme_bw() +
ylim(0, 20)
ggplot(df_meta_norm_int_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
theme_bw()
df_meta <- df_match[,c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma", "C1_int", "C2_int", "C3_int", "C4_int")]
# Normalization
df_meta <- log10(df_meta)
df_meta[sapply(df_meta, is.infinite)] <- NA
means <- apply(df_meta,2,mean, na.rm=TRUE)
sds <- apply(df_meta,2,sd, na.rm=TRUE)
df_meta_norm <- scale(df_meta,center=means,scale=sds)
#file = "Spot_matching_result_imputated.csv"
file = "Spot_matching_result.csv"
df_match <- read.csv(paste0(base, file))
View(df_match)
print(colnames(df_match))
df_meta <- df_match[,c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma", "C1_int", "C2_int", "C3_int", "C4_int")]
# Normalization
df_meta <- log10(df_meta)
df_meta[sapply(df_meta, is.infinite)] <- NA
means <- apply(df_meta,2,mean, na.rm=TRUE)
sds <- apply(df_meta,2,sd, na.rm=TRUE)
df_meta_norm <- scale(df_meta,center=means,scale=sds)
# Histogram: Sigma/intensity distribution after normalization
df_meta_norm_sig <- df_meta_norm[,c(1:4)]
df_meta_norm_sig_dist <- df_meta_norm_sig %>% melt()
df_meta_norm_sig_dist <- df_meta_norm_sig_dist[,c(2,3)]
colnames(df_meta_norm_sig_dist)[1] <- "variable"
#df_meta_norm_sig_dist <- df_meta_norm_sig_dist[c(rownames(multi_sig_dist)),]
cdat <- ddply(df_meta_norm_sig_dist, "variable", summarise, rating.mean = mean(value, na.rm = TRUE))
ggplot(df_meta_norm_sig_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma") +
xlim(-5, 5)
ggplot(df_meta_norm_sig_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
theme_bw()
df_meta_norm_int <- df_meta_norm[,c(5:8)]
df_meta_norm_int_dist <- df_meta_norm_int %>% melt()
df_meta_norm_int_dist <- df_meta_norm_int_dist[,c(2,3)]
colnames(df_meta_norm_int_dist)[1] <- "variable"
#df_meta_norm_int_dist <- df_meta_norm_int_dist[rownames(multi_int_dist),]
cdat <- ddply(df_meta_norm_int_dist, "variable", summarise, rating.mean = mean(value, na.rm = TRUE))
ggplot(df_meta_norm_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("intensity") +
xlim(-2, 5)
ggplot(df_meta_norm_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("intensity") +
xlim(-5, 5)
ggplot(df_meta_norm_int_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
theme_bw()
# Calculate distance and determine cluster number
# Euclidean distance: observation with high values of features will be clustered together
# Correlation based distance: Identify clusters of observation regardless of their magnitude
distance = dist(df_meta_norm)
?dist
df_meta.hclust = hclust(distance, method = "ward.D2")
library(devtools)
install_github("Displayr/flipCluster", dependencies = NA)
# Partial data cluster analysis
library(flipCluster)
# Partial data cluster analysis
library("flipCluster")
# Partial data cluster analysis
library("Displayr/flipCluster")
require(devtools)
install_github("Displayr/flipCluster", dependencies = NA)
df_meta_norm_test <- (0 - means)/sds
df_meta_norm_test <- (log10(0.1) - means)/sds
df_meta_norm_test
df_meta_norm_test[sapply(df_meta, is.na)] <- df_meta_norm_test
head(df_meta_norm_test)
df_meta_norm_test <- (log10(0.1) - means)/sds
df_meta_norm_test[sapply(df_meta, is.na),] <- df_meta_norm_test
df_meta_norm_test <- (log10(0.1) - means)/sds
df_meta_norm_test[apply(df_meta, 2,is.na)] <- df_meta_norm_test
df_meta_norm_test[1:10, 1:4]
df_meta_norm_test[1:10]
df_meta_norm_test <- (log10(0.1) - means)/sds
for (i in 1:length(df_meta_norm_test)){
df_meta_norm[is.na(df_meta_norm[,i]),i] <- df_meta_norm_test[i]
}
# Histogram: Sigma/intensity distribution after normalization
df_meta_norm_sig <- df_meta_norm[,c(1:4)]
df_meta_norm_sig_dist <- df_meta_norm_sig %>% melt()
df_meta_norm_sig_dist <- df_meta_norm_sig_dist[,c(2,3)]
colnames(df_meta_norm_sig_dist)[1] <- "variable"
#df_meta_norm_sig_dist <- df_meta_norm_sig_dist[c(rownames(multi_sig_dist)),]
cdat <- ddply(df_meta_norm_sig_dist, "variable", summarise, rating.mean = mean(value, na.rm = TRUE))
ggplot(df_meta_norm_sig_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma") +
xlim(-5, 5)
ggplot(df_meta_norm_sig_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma") +
xlim(-10, 5)
ggplot(df_meta_norm_sig_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=.1, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma") +
xlim(-15, 5)
ggplot(df_meta_norm_sig_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
theme_bw()
# Calculate distance and determine cluster number
# Euclidean distance: observation with high values of features will be clustered together
# Correlation based distance: Identify clusters of observation regardless of their magnitude
distance = dist(df_meta_norm)
df_meta.hclust = hclust(distance, method = "ward.D2")
plot(df_meta.hclust,hang=-1, labels = FALSE, main='Hierarchical Cluster')
fviz_nbclust(df_meta_norm, kmeans, method = "silhouette")
k2 <- kmeans(df_meta_norm, centers = n_cluster, nstart = 25)  # centers = number of clusters
k2 <- kmeans(df_meta_norm, centers = n_cluster, nstart = 25)  # centers = number of clusters
# K-means clustering
n_cluster = 4
k2 <- kmeans(df_meta_norm, centers = n_cluster, nstart = 25)  # centers = number of clusters
str(k2)
fviz_cluster(k2, data = df_meta_norm, geom = "point", ggtheme = theme_bw())
library(GGally)
ggpairs(df_match, columns=c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma", "C1_int", "C2_int", "C3_int", "C4_int"), aes(colour=cluster, alpha = 0.5), lower=list(continuous='points'), axisLabels='none')#, upper=list(continuous='blank'))
df_match[,'cluster'] <- k2$cluster
ggpairs(df_match, columns=c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma", "C1_int", "C2_int", "C3_int", "C4_int"), aes(colour=cluster, alpha = 0.5), lower=list(continuous='points'), axisLabels='none')#, upper=list(continuous='blank'))
ggpairs(df_meta_norm, columns=c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma", "C1_int", "C2_int", "C3_int", "C4_int"), aes(colour=cluster, alpha = 0.5), lower=list(continuous='points'), axisLabels='none')#, upper=list(continuous='blank'))
df_meta_norm[,'cluster'] <- k2$cluster
View(df_meta_norm)
# Normalization
df_meta <- log10(df_meta)
df_meta[sapply(df_meta, is.infinite)] <- NA
means <- apply(df_meta,2,mean, na.rm=TRUE)
sds <- apply(df_meta,2,sd, na.rm=TRUE)
df_meta_norm <- scale(df_meta,center=means,scale=sds) %>% data.frame()
df_meta_norm_imputate <- (log10(0.1) - means)/sds
for (i in 1:length(df_meta_norm_imputate)){
df_meta_norm[is.na(df_meta_norm[,i]),i] <- df_meta_norm_imputate[i]
}
df_meta_norm[,'cluster'] <- k2$cluster
ggpairs(df_meta_norm, columns=c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma", "C1_int", "C2_int", "C3_int", "C4_int"), aes(colour=cluster, alpha = 0.5), lower=list(continuous='points'), axisLabels='none')#, upper=list(continuous='blank'))
df_meta_norm[,'cluster'] <- factor(k2$cluster)
ggpairs(df_meta_norm, columns=c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma", "C1_int", "C2_int", "C3_int", "C4_int"), aes(colour=cluster, alpha = 0.5), lower=list(continuous='points'), axisLabels='none')#, upper=list(continuous='blank'))
# Normalization
df_meta <- log10(df_meta)
df_meta[sapply(df_meta, is.infinite)] <- NA
means <- apply(df_meta,2,mean, na.rm=TRUE)
sds <- apply(df_meta,2,sd, na.rm=TRUE)
df_meta_norm <- scale(df_meta,center=means,scale=sds) %>% data.frame()
df_meta_norm_imputate <- (log10(0.1) - means)/sds
for (i in 1:length(df_meta_norm_imputate)){
df_meta_norm[is.na(df_meta_norm[,i]),i] <- df_meta_norm_imputate[i]
}
View(df_meta_norm)
#base = "C:/Users/pc/Desktop/UNIST_internship/Sample_Image/Positive/PB417_01/"
vis_path = paste0(base, "analysis_20221117/")
pdf(file = paste0(vis_path, "clusters_pairs.pdf"), width = 10, height = 10)
ggpairs(df_meta_norm, columns=c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma", "C1_int", "C2_int", "C3_int", "C4_int"), aes(colour=cluster, alpha = 0.5), lower=list(continuous='points'), axisLabels='none')#, upper=list(continuous='blank'))
# K-means clustering
n_cluster = 4
k2 <- kmeans(df_meta_norm, centers = n_cluster, nstart = 25)  # centers = number of clusters
df_match[,'cluster'] <- k2$cluster
df_meta_norm[,'cluster'] <- factor(k2$cluster)
pdf(file = paste0(vis_path, "clusters_pairs.pdf"), width = 10, height = 10)
ggpairs(df_meta_norm, columns=c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma", "C1_int", "C2_int", "C3_int", "C4_int"), aes(colour=cluster, alpha = 0.5), lower=list(continuous='points'), axisLabels='none')#, upper=list(continuous='blank'))
dev.off()
# Number of spots for each cluster
cluster_histogram <- k2$cluster %>% table()
cluster_histogram_df <- data.frame(cluster = names(cluster_histogram), freq = as.numeric(cluster_histogram))
pdf(file = paste(vis_path, "Cluster_freq_histogram.pdf", sep=""), width = 9, height = 7)
ggplot_cluster_histogram <- ggplot(cluster_histogram_df, aes(x=cluster, y=freq)) +
geom_bar(stat="identity", width=1, color = "white") +
theme_bw() +
theme(plot.title = element_text(size=20, hjust=0.5, face = "bold")) +
geom_text(aes(y = (freq+10), label = freq, fontface = 2), size=8) +
labs(title = "Number of Spots in Each Cluster")
print(ggplot_cluster_histogram)
dev.off()
# Is there a certain pattern in cluster?
# Pie plot : the proportion of cluster in each channel
for (ch in c('C1', 'C2', 'C3', 'C4')){
pdf(file = paste(vis_path, paste0("cluster_proportion_in_channel_", ch, ".pdf"), sep=""), width = 9, height = 7)
cluster <- df_match[!is.na(df_match[,paste0(ch, "_id")]),"cluster"]
cluster_freq <- cluster %>% table()
cluster_freq_df <- data.frame(cluster = names(cluster_freq), freq = as.numeric(cluster_freq))
empty_cluster <- setdiff(c(1:n_cluster), names(cluster_freq))
if (length(empty_cluster) > 0){
cluster_freq_df[(length(names(cluster_freq))+1),"cluster"] <- empty_cluster
cluster_freq_df[(length(names(cluster_freq))+1),"freq"] <- 0
cluster_freq_df$cluster <- factor(cluster_freq_df$cluster, levels = c(1:n_cluster))
}
ggplot_cluster_proportion <- ggplot(cluster_freq_df, aes(x=cluster, y=freq)) +
geom_bar(stat="identity", width=1, color = "white") +
#scale_fill_manual(values = c("1" = "#F8766D", "2" = "#D39200", "3" = "#00BA38", "4" = "#00aedb", "5" = "#C77CFF")) + #"5" = "#00B9E3", , "7" = "#FF61C3"
theme_bw() +
theme(plot.title = element_text(size=20, hjust=0.5, face = "bold")) +
geom_text(aes(y = (freq+10), label = freq, fontface = 2), size=8) +
labs(title = paste0("Cluster Proportion in channel ", ch))
print(ggplot_cluster_proportion)
dev.off()
}
cluster <- df_match[!is.na(df_match[,paste0(ch, "_id")]),"cluster"]
cluster_freq <- cluster %>% table()
cluster_freq_df <- data.frame(cluster = names(cluster_freq), freq = as.numeric(cluster_freq))
empty_cluster <- setdiff(c(1:n_cluster), names(cluster_freq))
if (length(empty_cluster) > 0){
cluster_freq_df[(length(names(cluster_freq))+1),"cluster"] <- empty_cluster
cluster_freq_df[(length(names(cluster_freq))+1),"freq"] <- 0
cluster_freq_df$cluster <- factor(cluster_freq_df$cluster, levels = c(1:n_cluster))
}
View(cluster_freq_df)
# Is there a certain pattern in cluster?
# Pie plot : the proportion of cluster in each channel
for (ch in c('C1', 'C2', 'C3', 'C4')){
pdf(file = paste(vis_path, paste0("cluster_proportion_in_channel_", ch, ".pdf"), sep=""), width = 9, height = 7)
cluster <- df_match[!is.na(df_match[,paste0(ch, "_id")]),"cluster"]
cluster_freq <- cluster %>% table()
cluster_freq_df <- data.frame(cluster = names(cluster_freq), freq = as.numeric(cluster_freq))
empty_cluster <- setdiff(c(1:n_cluster), names(cluster_freq))
if (length(empty_cluster) > 0){
for (i in 1:length(empty_cluster)){
cluster_freq_df[(length(names(cluster_freq))+i),"cluster"] <- empty_cluster[i]
cluster_freq_df[(length(names(cluster_freq))+i),"freq"] <- 0
cluster_freq_df$cluster <- factor(cluster_freq_df$cluster, levels = c(1:n_cluster))
}
}
ggplot_cluster_proportion <- ggplot(cluster_freq_df, aes(x=cluster, y=freq)) +
geom_bar(stat="identity", width=1, color = "white") +
#scale_fill_manual(values = c("1" = "#F8766D", "2" = "#D39200", "3" = "#00BA38", "4" = "#00aedb", "5" = "#C77CFF")) + #"5" = "#00B9E3", , "7" = "#FF61C3"
theme_bw() +
theme(plot.title = element_text(size=20, hjust=0.5, face = "bold")) +
geom_text(aes(y = (freq+10), label = freq, fontface = 2), size=8) +
labs(title = paste0("Cluster Proportion in channel ", ch))
print(ggplot_cluster_proportion)
dev.off()
}
