save(list = c("x", "ret", "ret.save"), file = "C:/Users/user/Desktop/UNIST_internship/data/crabs.RndEM.rda")
####################################################
# adjR
##########################################################
rm(list = ls())
load("C:/Users/user/Desktop/UNIST_internship/data/crabs.RndEM.rda")
crabs.id <- rep(1L, nrow(crabs))
crabs.id[crabs$sp == "B" & crabs$sex == "F"] <- 2L
crabs.id[crabs$sp == "O" & crabs$sex == "M"] <- 3L
crabs.id[crabs$sp == "O" & crabs$sex == "F"] <- 4L
for(k0 in 1:7){
emobj0 <- ret.save[[k0]]
cat("K = ", k0, "\n", sep = "")
print(RRand(emobj0$class, crabs.id))
}
for(k0 in 1:6){
emobj0 <- ret.save[[k0]]
cat("K = ", k0, "\n", sep = "")
print(RRand(emobj0$class, crabs.id))
}
####################################################
# test
##########################################################
rm(list = ls())
load("C:/Users/user/Desktop/UNIST_internship/data/crabs.RndEM.rda")
tau <- 0.5
n.mc.base <- 1000
ret.test <- NULL
for(k0 in 1:6){
for(ka in (k0+1):7){
seed <- 1234 + k0 + ka
set.seed(seed)
n.mc <- n.mc.base * max(c(k0, ka))
emobj0 <- ret.save[[k0]]
emobja <- ret.save[[ka]]
ll.0 <- emobj0$llhdval
ll.a <- emobja$llhdval
delta.hat <- emobja$llhdval - emobj0$llhdval
E.delta <- get.E.delta(x, emobj0, emobja, tau = tau, n.mc = n.mc)
E.chi2.0 <- get.E.chi2(x, emobj0, emobja, "0", tau = tau, n.mc = n.mc,
verbose = FALSE)
E.chi2.a <- get.E.chi2(x, emobj0, emobja, "a", tau = tau, n.mc = n.mc,
verbose = FALSE)
T <- 2 * (delta.hat - E.delta)
pv0 <- pchisq.my(T, E.chi2.0[1], E.chi2.0[2], lower.tail = FALSE)
pva <- pchisq.my(T, E.chi2.a[1], E.chi2.a[2], lower.tail = FALSE)
pv <- pv0 * tau + pva * (1 - tau)
cat("  H0: K = ", k0, " vs Ha: K = ", ka, "\n",
"    ll0 = ", ll.0, ", lla = ", ll.a, "\n",
"    df0 = ", E.chi2.0[1], ", nc0 = ", E.chi2.0[2],
", dfa = ", E.chi2.a[1], ", nca = ", E.chi2.a[2], "\n",
"    delta.hat = ", delta.hat, ", E.delta = ", E.delta,
", T = ", T, "\n",
"    pv0 = ", pv0, ", pva = ", pva, " pv = ", pv,
"\n", sep = "")
ret.test <- rbind(ret.test,
c(k0, ka, ll.0, ll.a, E.chi2.0, E.chi2.a, delta.hat,
E.delta, T, pv0, pva, pv, seed))
}
}
for(k0 in 1:5){
for(ka in (k0+1):6){
seed <- 1234 + k0 + ka
set.seed(seed)
n.mc <- n.mc.base * max(c(k0, ka))
emobj0 <- ret.save[[k0]]
emobja <- ret.save[[ka]]
ll.0 <- emobj0$llhdval
ll.a <- emobja$llhdval
delta.hat <- emobja$llhdval - emobj0$llhdval
E.delta <- get.E.delta(x, emobj0, emobja, tau = tau, n.mc = n.mc)
E.chi2.0 <- get.E.chi2(x, emobj0, emobja, "0", tau = tau, n.mc = n.mc,
verbose = FALSE)
E.chi2.a <- get.E.chi2(x, emobj0, emobja, "a", tau = tau, n.mc = n.mc,
verbose = FALSE)
T <- 2 * (delta.hat - E.delta)
pv0 <- pchisq.my(T, E.chi2.0[1], E.chi2.0[2], lower.tail = FALSE)
pva <- pchisq.my(T, E.chi2.a[1], E.chi2.a[2], lower.tail = FALSE)
pv <- pv0 * tau + pva * (1 - tau)
cat("  H0: K = ", k0, " vs Ha: K = ", ka, "\n",
"    ll0 = ", ll.0, ", lla = ", ll.a, "\n",
"    df0 = ", E.chi2.0[1], ", nc0 = ", E.chi2.0[2],
", dfa = ", E.chi2.a[1], ", nca = ", E.chi2.a[2], "\n",
"    delta.hat = ", delta.hat, ", E.delta = ", E.delta,
", T = ", T, "\n",
"    pv0 = ", pv0, ", pva = ", pva, " pv = ", pv,
"\n", sep = "")
ret.test <- rbind(ret.test,
c(k0, ka, ll.0, ll.a, E.chi2.0, E.chi2.a, delta.hat,
E.delta, T, pv0, pva, pv, seed))
}
}
colnames(ret.test) <- c("K0", "Ka", "ll0", "lla",
"df0", "nc0", "dfa", "nca",
"delta.hat", "E.delta", "T",
"pv0", "pva", "pv", "seed")
save(list = c("ret.test"), file = "C:/Users/user/Desktop/UNIST_internship/data/crabs.test.rda")
print(ret.test)
##########################################################
# plot
##########################################################
rm(list = ls())
load("C:/Users/user/Desktop/UNIST_internship/data/iris.RndEM.rda")
x <- as.matrix(crabs[, 4:8])
da.s.all <- list()
for(k0 in 2:5){
emobj <- ret.save[[k0]]
var <- LTSigma2variance(emobj$LTSigma)
x.pp <- x
Sigma.pp <- var
for(k.var in 1:dim(var)[3]){
tmp <- eigen(var[,, k.var])
Sigma.k.inv <- tmp$vector %*% diag(sqrt(1/tmp$values)) %*% t(tmp$vector)
tmp <- x[emobj$class == k.var,]
tmp.mu <- colMeans(tmp)
tmp <- t(t(tmp) - tmp.mu) %*% Sigma.k.inv
tmp <- t(t(tmp) + as.vector(tmp.mu))
x.pp[emobj$class == k.var,] <- tmp
# Sigma.pp[,, k.var] <- Sigma.k.inv
}
set.seed(1234)
tmp.pp <- PP.optimize.random("LDA", 2, x.pp, emobj$class, std = FALSE)
# plot(y %*% tmp.pp$proj.best, xlab = "PP1", ylab = "PP2",
#      col = ret.save[[k0]]$class, pch = ret.save[[k0]]$class)
x.new <- x %*% tmp.pp$proj.best
mu.new <- emobj$Mu %*% tmp.pp$proj.best
var.new <- array(0, dim = c(2, 2, dim(var)[3]))
for(k.var in 1:dim(var)[3]){
tmp <- t(tmp.pp$proj.best) %*% Sigma.pp[,, k.var] %*% tmp.pp$proj.best
var.new[,, k.var] <- tmp
}
da.s <- list(pi = emobj$pi,
Mu = mu.new,
LTSigma = variance2LTSigma(var.new),
class = emobj$class,
nclass = emobj$nclass)
da.s.all[[k0]] <- list(model = da.s, x = x.new)
# color.class <- 1:11
# postscript(file = paste("./plot/iris_pp_k=", k0, ".eps", sep = ""),
#            height = 6, width = 6, horizontal = FALSE)
# plotem(da.s, x.new, xlab = "PP1", ylab = "PP2",
#        main = paste("K = ", k0, sep = ""))
# dev.off()
}
##########################################################
# plot
##########################################################
rm(list = ls())
load("C:/Users/user/Desktop/UNIST_internship/data/iris.RndEM.rda")
x <- as.matrix(crabs[, 4:8])
da.s.all <- list()
for(k0 in 2:5){
emobj <- ret.save[[k0]]
var <- LTSigma2variance(emobj$LTSigma)
x.pp <- x
Sigma.pp <- var
for(k.var in 1:dim(var)[3]){
tmp <- eigen(var[,, k.var])
Sigma.k.inv <- tmp$vector %*% diag(sqrt(1/tmp$values)) %*% t(tmp$vector)
tmp <- x[emobj$class == k.var,]
tmp.mu <- colMeans(tmp)
tmp <- t(t(tmp) - tmp.mu) %*% Sigma.k.inv
tmp <- t(t(tmp) + as.vector(tmp.mu))
x.pp[emobj$class == k.var,] <- tmp
# Sigma.pp[,, k.var] <- Sigma.k.inv
}
set.seed(1234)
tmp.pp <- PP.optimize.random("LDA", 2, x.pp, emobj$class, std = FALSE)
# plot(y %*% tmp.pp$proj.best, xlab = "PP1", ylab = "PP2",
#      col = ret.save[[k0]]$class, pch = ret.save[[k0]]$class)
x.new <- x %*% tmp.pp$proj.best
mu.new <- emobj$Mu %*% tmp.pp$proj.best
var.new <- array(0, dim = c(2, 2, dim(var)[3]))
for(k.var in 1:dim(var)[3]){
tmp <- t(tmp.pp$proj.best) %*% Sigma.pp[,, k.var] %*% tmp.pp$proj.best
var.new[,, k.var] <- tmp
}
da.s <- list(pi = emobj$pi,
Mu = mu.new,
LTSigma = variance2LTSigma(var.new),
class = emobj$class,
nclass = emobj$nclass)
da.s.all[[k0]] <- list(model = da.s, x = x.new)
# color.class <- 1:11
# postscript(file = paste("./plot/iris_pp_k=", k0, ".eps", sep = ""),
#            height = 6, width = 6, horizontal = FALSE)
# plotem(da.s, x.new, xlab = "PP1", ylab = "PP2",
#        main = paste("K = ", k0, sep = ""))
# dev.off()
}
emobj <- ret.save[[k0]]
var <- LTSigma2variance(emobj$LTSigma)
x.pp <- x
Sigma.pp <- var
for(k.var in 1:dim(var)[3]){
tmp <- eigen(var[,, k.var])
Sigma.k.inv <- tmp$vector %*% diag(sqrt(1/tmp$values)) %*% t(tmp$vector)
tmp <- x[emobj$class == k.var,]
tmp.mu <- colMeans(tmp)
tmp <- t(t(tmp) - tmp.mu) %*% Sigma.k.inv
tmp <- t(t(tmp) + as.vector(tmp.mu))
x.pp[emobj$class == k.var,] <- tmp
# Sigma.pp[,, k.var] <- Sigma.k.inv
}
tmp <- eigen(var[,, k.var])
Sigma.k.inv <- tmp$vector %*% diag(sqrt(1/tmp$values)) %*% t(tmp$vector)
tmp <- x[emobj$class == k.var,]
tmp.mu <- colMeans(tmp)
tmp
dim(t(tmp))
tmp.mu
t(tmp) - tmp.mu
dim(t(tmp) - tmp.mu)
dim(Sigma.k.inv)
dim(tmp$vector)
tmp <- eigen(var[,, k.var])
dim(tmp$vector)
View(emobj)
##########################################################
# plot
##########################################################
rm(list = ls())
load("C:/Users/user/Desktop/UNIST_internship/data/iris.RndEM.rda")
x <- as.matrix(crabs[, 4:8])
da.s.all <- list()
emobj <- ret.save[[k0]]
k0 = 2
emobj <- ret.save[[k0]]
View(ret.save)
##########################################################
# plot
##########################################################
rm(list = ls())
load("C:/Users/user/Desktop/UNIST_internship/data/crabs.RndEM.rda")
x <- as.matrix(crabs[, 4:8])
da.s.all <- list()
for(k0 in 2:5){
emobj <- ret.save[[k0]]
var <- LTSigma2variance(emobj$LTSigma)
x.pp <- x
Sigma.pp <- var
for(k.var in 1:dim(var)[3]){
tmp <- eigen(var[,, k.var])
Sigma.k.inv <- tmp$vector %*% diag(sqrt(1/tmp$values)) %*% t(tmp$vector)
tmp <- x[emobj$class == k.var,]
tmp.mu <- colMeans(tmp)
tmp <- t(t(tmp) - tmp.mu) %*% Sigma.k.inv
tmp <- t(t(tmp) + as.vector(tmp.mu))
x.pp[emobj$class == k.var,] <- tmp
# Sigma.pp[,, k.var] <- Sigma.k.inv
}
set.seed(1234)
tmp.pp <- PP.optimize.random("LDA", 2, x.pp, emobj$class, std = FALSE)
# plot(y %*% tmp.pp$proj.best, xlab = "PP1", ylab = "PP2",
#      col = ret.save[[k0]]$class, pch = ret.save[[k0]]$class)
x.new <- x %*% tmp.pp$proj.best
mu.new <- emobj$Mu %*% tmp.pp$proj.best
var.new <- array(0, dim = c(2, 2, dim(var)[3]))
for(k.var in 1:dim(var)[3]){
tmp <- t(tmp.pp$proj.best) %*% Sigma.pp[,, k.var] %*% tmp.pp$proj.best
var.new[,, k.var] <- tmp
}
da.s <- list(pi = emobj$pi,
Mu = mu.new,
LTSigma = variance2LTSigma(var.new),
class = emobj$class,
nclass = emobj$nclass)
da.s.all[[k0]] <- list(model = da.s, x = x.new)
# color.class <- 1:11
# postscript(file = paste("./plot/iris_pp_k=", k0, ".eps", sep = ""),
#            height = 6, width = 6, horizontal = FALSE)
# plotem(da.s, x.new, xlab = "PP1", ylab = "PP2",
#        main = paste("K = ", k0, sep = ""))
# dev.off()
}
save(da.s.all, x, file = "C:/Users/user/Desktop/UNIST_internship/data/crabs.pp.rda")
##########################################################
# plot contour
##########################################################
rm(list = ls())
load("C:/Users/user/Desktop/UNIST_internship/data/crabs.pp.rda")
for(k0 in 2:5){
Pi <- da.s.all[[k0]]$model$pi
Mu <- da.s.all[[k0]]$model$Mu
S <- LTSigma2variance(da.s.all[[k0]]$model$LTSigma)
class <- da.s.all[[k0]]$model$class
da <- da.s.all[[k0]]$x
# crabs has weird projection and needs a rotation to get a better view.
if(k0 == 2) angle <- 40 / 180 * pi
if(k0 == 3) angle <- 10 / 180 * pi
if(k0 == 4) angle <- 45 / 180 * pi
if(k0 == 5) angle <- -20 / 180 * pi
if(k0 == 6) angle <- 0 / 180 * pi
pdf(paste("C:/Users/user/Desktop/UNIST_internship/plot/crabs_ppcont_k=", k0, ".pdf", sep = ""),
width = 6, height = 6)
plotppcontour(da, Pi, Mu, S, class)
dev.off()
}
##########################################################
# qmap
##########################################################
rm(list = ls())
load("C:/Users/user/Desktop/UNIST_internship/data/crabs.test.rda")
### quant.av
K.min <- min(ret.test[, 1])
K.max <- max(ret.test[, 2])
pv.un <- ret.test[, 14]
pv.un <- pv.un[ret.test[, 1] <= K.max & ret.test[, 2] <= K.max]
#postscript("./plot/qmap.iris.ps", width = 5, height = 5, horizontal = FALSE)
pdf("./plot/qmap.crabs.pdf", width = 5, height = 5)
plotq(pv.un, dim = K.max - 1, start = K.min)
dev.off()
library(cluster)
library(factoextra)
library(dplyr)
library(ggplot2)
library(reshape2)
library(VennDiagram)
library(RColorBrewer)
library(plyr)
#base = "C:/Users/user/Desktop/UNIST_internship/Sample_Image/Negative/2/"
#base = "C:/Users/user/Desktop/UNIST_internship/Sample_Image/Positive/PB417_01/"
base = "C:/Users/pc/Desktop/UNIST_internship/Sample_Image/Positive/PB417_01/"
vis_path = paste0(base, "analysis_20221109/")
file = "Spot_matching_result_imputated.csv"
df_match <- read.csv(paste0(base, file))
print(colnames(df_match))
#df_match <- df_match[which(df_match$n_match > 1),] # Only take coexpressed spots
#df_match <- df_match[which(df_match)]
df_meta <- df_match[,c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma", "C1_int", "C2_int", "C3_int", "C4_int")]
# Compare Intensity/Sigma distribution in channels
multi_sig_dist <- avg_sig_prep %>% melt()
#multi_sig_dist <- multi_sig_dist[which(multi_sig_dist$value > 0),]
cdat <- ddply(multi_sig_dist, "variable", summarise, rating.mean = mean(value))
#CI_low <- ddply(multi_sig_dist, "variable", summarise, CI = as.numeric(t.test(value, conf.level = 0.95)[4]$conf.int[1]))
#CI_high <- ddply(multi_sig_dist, "variable", summarise, CI = as.numeric(t.test(value, conf.level = 0.95)[4]$conf.int[2]))
pdf(file = paste0(vis_path, "sigma_distribution_withzero_histogram.pdf"), width = 8, height = 6)
ggplot(multi_sig_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=5, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma")
#geom_vline(data = CI_low, aes(xintercept=CI, colour = variable), size = 0.5) +
#geom_vline(data = CI_high, aes(xintercept=CI, colour = variable), size = 0.5)
dev.off
ggplot(multi_sig_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
theme_bw()
# Average intensity/sigma of spots in each channel
avg_int_prep <- df_match[,c("C1_int", "C2_int", "C3_int", "C4_int")]
avg_sig_prep <- df_match[,c("C1_sigma", "C2_sigma", "C3_sigma", "C4_sigma")]
# Compare Intensity/Sigma distribution in channels
multi_sig_dist <- avg_sig_prep %>% melt()
#multi_sig_dist <- multi_sig_dist[which(multi_sig_dist$value > 0),]
cdat <- ddply(multi_sig_dist, "variable", summarise, rating.mean = mean(value))
#CI_low <- ddply(multi_sig_dist, "variable", summarise, CI = as.numeric(t.test(value, conf.level = 0.95)[4]$conf.int[1]))
#CI_high <- ddply(multi_sig_dist, "variable", summarise, CI = as.numeric(t.test(value, conf.level = 0.95)[4]$conf.int[2]))
pdf(file = paste0(vis_path, "sigma_distribution_withzero_histogram.pdf"), width = 8, height = 6)
ggplot(multi_sig_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=5, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma")
#geom_vline(data = CI_low, aes(xintercept=CI, colour = variable), size = 0.5) +
#geom_vline(data = CI_high, aes(xintercept=CI, colour = variable), size = 0.5)
dev.off
ggplot(multi_sig_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
theme_bw()
multi_sig_dist <- avg_sig_prep %>% melt()
#multi_sig_dist <- multi_sig_dist[which(multi_sig_dist$value > 0),]
#cdat <- ddply(multi_sig_dist, "variable", summarise, rating.mean = mean(value))
#CI_low <- ddply(multi_sig_dist, "variable", summarise, CI = as.numeric(t.test(value, conf.level = 0.95)[4]$conf.int[1]))
#CI_high <- ddply(multi_sig_dist, "variable", summarise, CI = as.numeric(t.test(value, conf.level = 0.95)[4]$conf.int[2]))
pdf(file = paste0(vis_path, "sigma_distribution_withzero_histogram.pdf"), width = 8, height = 6)
ggplot(multi_sig_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=5, alpha = .5, position = "identity")+
#geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma")
#geom_vline(data = CI_low, aes(xintercept=CI, colour = variable), size = 0.5) +
#geom_vline(data = CI_high, aes(xintercept=CI, colour = variable), size = 0.5)
dev.off
ggplot(multi_sig_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
theme_bw()
# Compare Intensity/Sigma distribution in channels
multi_sig_dist <- avg_sig_prep %>% melt()
#multi_sig_dist <- multi_sig_dist[which(multi_sig_dist$value > 0),]
#cdat <- ddply(multi_sig_dist, "variable", summarise, rating.mean = mean(value))
#CI_low <- ddply(multi_sig_dist, "variable", summarise, CI = as.numeric(t.test(value, conf.level = 0.95)[4]$conf.int[1]))
#CI_high <- ddply(multi_sig_dist, "variable", summarise, CI = as.numeric(t.test(value, conf.level = 0.95)[4]$conf.int[2]))
pdf(file = paste0(vis_path, "sigma_distribution_withzero_histogram.pdf"), width = 8, height = 6)
ggplot(multi_sig_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=5, alpha = .5, position = "identity")+
#geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlab("sigma")
#geom_vline(data = CI_low, aes(xintercept=CI, colour = variable), size = 0.5) +
#geom_vline(data = CI_high, aes(xintercept=CI, colour = variable), size = 0.5)
dev.off()
ggplot(multi_sig_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
theme_bw()
multi_int_dist <- avg_int_prep %>% melt()
#multi_int_dist <- multi_int_dist[c(rownames(multi_sig_dist)),]
# for (ch in unique(multi_int_dist$variable)){
#   imputed_table <- multi_int_dist[which(multi_int_dist$variable == ch),"value"] %>% table()
#   minimum <- imputed_table[which(imputed_table == max(imputed_table))] %>% names() %>% as.numeric()
#   multi_int_dist <- multi_int_dist[!(multi_int_dist$variable == ch & multi_int_dist$value <= minimum),]
# }
#cdat <- ddply(multi_int_dist, "variable", summarise, rating.mean = mean(value))
pdf(file = paste0(vis_path, "intensity_distribution_withzero_histogram.pdf"), width = 8, height = 6)
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
#geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
dev.off()
ggplot(multi_int_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
ylim(0, 200000) +
theme_bw()
multi_int_dist <- avg_int_prep %>% melt()
multi_int_dist <- multi_int_dist[c(rownames(multi_sig_dist)),]
# for (ch in unique(multi_int_dist$variable)){
#   imputed_table <- multi_int_dist[which(multi_int_dist$variable == ch),"value"] %>% table()
#   minimum <- imputed_table[which(imputed_table == max(imputed_table))] %>% names() %>% as.numeric()
#   multi_int_dist <- multi_int_dist[!(multi_int_dist$variable == ch & multi_int_dist$value <= minimum),]
# }
#cdat <- ddply(multi_int_dist, "variable", summarise, rating.mean = mean(value))
pdf(file = paste0(vis_path, "intensity_distribution_histogram.pdf"), width = 8, height = 6)
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
#geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
dev.off()
ggplot(multi_int_dist, aes(x=variable, y=value, color=variable)) +
geom_boxplot() +
ylim(0, 200000) +
theme_bw()
multi_int_dist <- avg_int_prep %>% melt()
multi_int_dist <- multi_int_dist[c(rownames(multi_sig_dist)),]
# for (ch in unique(multi_int_dist$variable)){
#   imputed_table <- multi_int_dist[which(multi_int_dist$variable == ch),"value"] %>% table()
#   minimum <- imputed_table[which(imputed_table == max(imputed_table))] %>% names() %>% as.numeric()
#   multi_int_dist <- multi_int_dist[!(multi_int_dist$variable == ch & multi_int_dist$value <= minimum),]
# }
cdat <- ddply(multi_int_dist, "variable", summarise, rating.mean = mean(value))
pdf(file = paste0(vis_path, "intensity_distribution_histogram.pdf"), width = 8, height = 6)
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
dev.off()
multi_int_dist <- avg_int_prep %>% melt()
multi_int_dist <- multi_int_dist[c(rownames(multi_sig_dist)),]
# for (ch in unique(multi_int_dist$variable)){
#   imputed_table <- multi_int_dist[which(multi_int_dist$variable == ch),"value"] %>% table()
#   minimum <- imputed_table[which(imputed_table == max(imputed_table))] %>% names() %>% as.numeric()
#   multi_int_dist <- multi_int_dist[!(multi_int_dist$variable == ch & multi_int_dist$value <= minimum),]
# }
cdat <- ddply(multi_int_dist, "variable", summarise, rating.mean = mean(value))
pdf(file = paste0(vis_path, "intensity_distribution_histogram.pdf"), width = 8, height = 6)
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
dev.off()
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
multi_int_dist <- avg_int_prep %>% melt()
multi_int_dist <- multi_int_dist[c(rownames(multi_sig_dist)),]
# for (ch in unique(multi_int_dist$variable)){
#   imputed_table <- multi_int_dist[which(multi_int_dist$variable == ch),"value"] %>% table()
#   minimum <- imputed_table[which(imputed_table == max(imputed_table))] %>% names() %>% as.numeric()
#   multi_int_dist <- multi_int_dist[!(multi_int_dist$variable == ch & multi_int_dist$value <= minimum),]
# }
cdat <- ddply(multi_int_dist, "variable", summarise, rating.mean = mean(value))
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
multi_int_dist <- avg_int_prep %>% melt()
multi_int_dist <- multi_int_dist[c(rownames(multi_sig_dist)),]
# for (ch in unique(multi_int_dist$variable)){
#   imputed_table <- multi_int_dist[which(multi_int_dist$variable == ch),"value"] %>% table()
#   minimum <- imputed_table[which(imputed_table == max(imputed_table))] %>% names() %>% as.numeric()
#   multi_int_dist <- multi_int_dist[!(multi_int_dist$variable == ch & multi_int_dist$value <= minimum),]
# }
cdat <- ddply(multi_int_dist, "variable", summarise, rating.mean = mean(value))
ggplot(multi_int_dist, aes(x = value, fill = variable)) +
geom_histogram(binwidth=1000, alpha = .5, position = "identity")+
geom_vline(data = cdat, aes(xintercept=rating.mean, colour = variable),linetype = "dashed", size = 1) +
xlim(0, 200000) +
ylim(0, 150) +
xlab("intensity")
